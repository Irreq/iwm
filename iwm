#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Irreq's Window Manager (iwm)

A stacking window manager without borders and window controls.
Created with simplicity in mind. Heavily inspired by other window managers such as pywm.

Setup: chmod +x wm.py
Testing: Xephyr -resizeable :1 & DISPLAY=:1 /PATH/TO/iwm/iwm
"""

import os
import re
import subprocess
import sys
import time
import traceback

from Xlib import X, display, XK

# User Configuration
TERMINAL = "/usr/bin/alacritty"
MENU = "/usr/bin/dmenu_run"
VIRTUAL_SCREENS = range(1, 10)

Y_OFFSET = 8
PNT_OFFSET = 16
DRAG_THRESH = 16
DRAG_MAX_FPS = 30
MIN_WIN_SIZE = 16
BOUNCE_RATIO = 1 / 8

MOD = (1<<6)  # Super (mod4), aka "Windows" key
SHIFT = (1<<0)
CONTROL = (1<<2)

keybinds = {
    (MOD, "h"): ["warp", "left"],
    (MOD, "j"): ["warp", "down"],
    (MOD, "k"): ["warp", "up"],
    (MOD, "l"): ["warp", "right"],

    (MOD | SHIFT, "q"): "destroy_window",
    (MOD | SHIFT, "e"): "exit",
    (MOD | SHIFT, "r"): "restart",

    (MOD, "Return"): ["cmd", TERMINAL],
    (MOD, "o"): ["cmd", MENU],
}

# Assign keybind to virtual screen. Mod + Key -> screen N
for key in VIRTUAL_SCREENS:
    keybinds[(MOD, str(key))] = ["select_screen", key]
    keybinds[(MOD | SHIFT, str(key))] = ["move_to_screen", key]


LAYOUT_OFFSET = 0
# regexp: [x, y, width, height]
LAYOUT_RULES = {
    r'alacritty|kitty|st|xterm|rxvt': [.5, .3, .5, .7],
    r'ide|atom|eclipse|emacs|(neo|n)vim': [0, 0, .5 - LAYOUT_OFFSET, 1],
    r'firefox|chrom(e|ium)|midori':
    [.5 - LAYOUT_OFFSET, 0, .5 + LAYOUT_OFFSET, 1],
    r'pdf|dvi|office|mathematica|libre':
    [.5 - LAYOUT_OFFSET, 0, .5 + LAYOUT_OFFSET, 1],
}

def startup():
    os.system("shuf -ezn 1 ~/Pictures/Wallpapers/* | xargs -0 -n1 feh --no-fehbg --bg-scale")

def debug(message):
    print(message, file=sys.stderr)


class WindowManager():
    """Main Window Manager Class"""

    managed_windows = []
    exposed_windows = []
    current_vscreen = VIRTUAL_SCREENS[0]  # First one
    window_vscreen = {}

    drag_window = None
    drag_button = None
    drag_geometry = None
    drag_start_xy = None
    drag_last_time = 0

    EVENT_HANDLER = {
        X.KeyPress: "handle_keypress",  # 2

        X.ButtonPress: "handle_button_press",  # 4
        X.ButtonRelease: "handle_button_release", # 5
        X.MotionNotify: "handle_motion_notify",  # 6
        X.EnterNotify: "handle_enter_notify",  # 7

        X.DestroyNotify: "handle_destroy_notify",  # 17
        X.UnmapNotify: "handle_unmap_notify",  # 18
        X.MapNotify: "handle_map_notify",  # 19
        X.MapRequest: "handle_map_request",  # 20

        X.ConfigureRequest: "handle_configure_request",  # 23
    }

    def __init__(self):
        # X server display & screen
        self.display = display.Display()
        self.screen = self.display.screen()

        mask = (X.SubstructureRedirectMask | X.SubstructureNotifyMask
                | X.EnterWindowMask | X.LeaveWindowMask | X.FocusChangeMask)
        self.screen.root.change_attributes(event_mask=mask)

        self.key_handlers = {}

        # Configure the root window to receive key inputs defined in `keybinds`.
        for modifier, key in keybinds:
            code = self.display.keysym_to_keycode(XK.string_to_keysym(key))
            self.screen.root.grab_key(code, modifier, 1, X.GrabModeAsync,
                                      X.GrabModeAsync)
            self.key_handlers[(modifier, code)] = (key, keybinds[(modifier, key)])

        # Configure the root window to receive mouse button events.
        for button in [1, 3]:
            self.screen.root.grab_button(button, X.Mod4Mask, True,
                                         X.ButtonPressMask, X.GrabModeAsync,
                                         X.GrabModeAsync, X.NONE, X.NONE)

    # ---------------- X wrapper functions
    def get_window_status(self, window):
        """Check if the window WINDOW do exist."""
        windows = self.screen.root.query_tree().children
        return window in windows

    def get_window_class(self, window):
        """Fetch the WM_CLASS window property of the window WINDOW and return
        the class part of the property.  Return empty string if class is not
        retrieved."""
        try:
            cmd, cls = window.get_wm_class()
        except:
            return ''
        if cls is not None:
            return cls
        else:
            return ''

    def get_window_geometry(self, window):
        """Obtain the geometry and attributes of the window WINDOW.  Return as
        a Xlib.protocol.rq.Struct object.  Valid attributes are x, y, width,
        height, root, depth, border_width, and sequence_number.  Return None
        if the geometry is not retrieved."""
        try:
            return window.get_geometry()
        except:
            return None

    def get_window_attribute(self, window):
        try:
            return window.get_attributes()
        except:
            return None

    def get_window_name(self, window):
        return '{} [0x{:x}]'.format(self.get_window_class(window), window.id)

    def get_screen_size(self):
        """Return the dimension (WIDTH, HEIGHT) of the current screen as a
        tuple in pixels.  If xrandr command exsits and either DP (DisplayPort)
        or HDMI output is active, return its dimensionn instead of the screen
        size of the current X11 display."""
        width, height = self.screen.width_in_pixels, self.screen.height_in_pixels
        return width, height

    # ---------------- window manager functions
    def is_managed_window(self, window):
        """Check if the window WINDOW is under the control of the window
        manager."""
        return window in self.managed_windows

    def convert_geometry(self, x, y, width, height):
        """Convert a geometry X, Y, WIDTH and HEIGHT from the unit coordinate
        to the pixel coordinate.  For instance, the point (0.5, 1.0) in the
        unit coordinate is mapped to the mid-bottom (i.e., south) of the
        screen.  Return as a tuple by default.  If AS_DICT is True, return as
        a dictionary with keys `x', `y', `width' and `height'."""
        screen_width, screen_height = self.get_screen_size()
        px = int(screen_width * x)
        py = int(screen_height * y)
        pwidth = int(screen_width * width)
        pheight = int(screen_height * height)
        debug('convert_geometry: x=%s y=%s w=%s h=%s -> x:%s y:%s w:%s h:%s' %
              (x, y, width, height, px, py, pwidth, pheight))
        return {'x': px, 'y': py, 'width': pwidth, 'height': pheight}

    def manage_window(self, window):
        """The window WINDOW is put under the control of the window manager.
        The window is forced to be mapped on the current virtual screen.  The
        geometry of the window is unchnaged."""
        attrs = self.get_window_attribute(window)
        if attrs is None:
            return
        # skip if the window should not be intercepted by window manager
        if attrs.override_redirect:
            return
        # skip if the window is under our control
        if self.is_managed_window(window):
            return

        debug('manage_window: %s' % self.get_window_name(window))
        self.managed_windows.append(window)
        self.exposed_windows.append(window)
        self.window_vscreen[window] = self.current_vscreen

        # automatically layout the window if rule is found
        geom_dict = self.find_geometry_by_rules(window)
        if geom_dict is not None:
            window.configure(**geom_dict)

        window.map()
        mask = X.EnterWindowMask | X.LeaveWindowMask
        window.change_attributes(event_mask=mask)

    def unmanage_window(self, window):
        """The window WINDOW leaves from the control of the window manager."""
        if self.is_managed_window(window):
            debug('unmanage_window: %s' % self.get_window_name(window))
            if window in self.managed_windows:
                self.managed_windows.remove(window)
            if window in self.exposed_windows:
                self.exposed_windows.remove(window)
            del self.window_vscreen[window]

    def raise_window(self, window):
        """Make the window WINDOW above all other windows."""
        if not self.is_managed_window(window):
            return
        window.configure(stack_mode=X.Above)

    def focus_window(self, window):
        """Activate the input to the window WINDOW and the window frame is
        displayed."""
        if not self.is_managed_window(window):
            return

        # FIXME: simple hack to remove missing window
        if not self.get_window_status(window):
            return

        # FIXME: called two times? might be redundant
        debug('focus_window: %s' % self.get_window_name(window))
        window.set_input_focus(X.RevertToParent, 0)

    def select_vscreen(self, n):
        """Change the virtual screen to N."""
        debug('select_vscreen: %d' % n)
        self.current_vscreen = n
        self.exposed_windows.clear()
        for window in self.managed_windows:
            if self.window_vscreen[window] == n:
                window.map()
                self.exposed_windows.append(window)
            else:
                window.unmap()

    def find_geometry_by_rules(self, window):
        """Look through the configuration variable LAYOUT_RULES and identify
        the desired geometry (x, y, width, and height) of WINDOW.  The geometry is returned as
        a dictionary.  Return None if no rule is found."""
        debug('find_geometry_by_rules: %s' % self.get_window_name(window))
        cls = self.get_window_class(window)
        cur_geom = self.get_window_geometry(window)
        if cur_geom is None:
            return None
        screen_width, screen_height = self.get_screen_size()
        for regexp, geom in LAYOUT_RULES.items():
            if re.search(regexp, cls, flags=re.IGNORECASE):
                debug("  rule found -> '%s': %s" % (regexp, geom))
                # toggle the location of office applications
                if 'office' in regexp and cur_geom.x > screen_width / 4:
                    geom = [0, 0, .5 + LAYOUT_OFFSET, 1]
                return self.convert_geometry(*geom)
        return None

    # ---------------- event handlers
    def handle_keypress(self, event):
        """Event handler for KeyPress events."""
        key, entry = self.key_handlers.get((event.state, event.detail),(None, None))
        if entry:
            if type(entry) != str:
                f, args = entry[0], entry[1:]
            else:
                f, args = entry, None
            method = getattr(self, f, None)
            if method:
                if args is not None:
                    method(event, *args)
                else:
                    method(event)

    def handle_button_press(self, event):
        """Initiate window repositioning with the button 1 or window resizing
        with the button 3.  All mouse pointer motion events are captured until
        the button is relased."""
        window = event.child
        self.screen.root.grab_pointer(
            True, X.PointerMotionMask | X.ButtonReleaseMask, X.GrabModeAsync,
            X.GrabModeAsync, X.NONE, X.NONE, 0)
        self.drag_window = window
        self.drag_button = event.detail
        # FIXME: drag_geometry might be None
        self.drag_geometry = self.get_window_geometry(window)
        self.drag_start_xy = event.root_x, event.root_y

    def handle_button_release(self, event):
        """Terminate window repositioning/resizing."""
        self.display.ungrab_pointer(0)

    def handle_motion_notify(self, event):
        """Reposition or resize the current window according to the current
        pointer position.  The maximum rate of repositioning and resizeing is
        bounded by DRAG_MAX_FPS."""
        x, y = event.root_x, event.root_y
        # prevent to reposition window too frequently
        if time.time() - self.drag_last_time <= 1 / DRAG_MAX_FPS:
            return
        self.drag_last_time = time.time()

        dx = x - self.drag_start_xy[0]
        dy = y - self.drag_start_xy[1]

        if not self.get_window_status(self.drag_window):
            return

        if self.drag_button == 1:
            # reposition
            self.drag_window.configure(x=self.drag_geometry.x + dx,
                                       y=self.drag_geometry.y + dy)

            screen_width, screen_height = self.get_screen_size()

            # switch virtual screen
            if x >= screen_width - DRAG_THRESH:
                if self.current_vscreen < VIRTUAL_SCREENS[-1]:
                    self.window_vscreen[self.drag_window] += 1
                    self.select_vscreen(self.current_vscreen + 1)
                    self.screen.root.warp_pointer(int(screen_width * BOUNCE_RATIO),
                                                  y)
            elif x <= DRAG_THRESH:
                if self.current_vscreen > VIRTUAL_SCREENS[0]:
                    self.window_vscreen[self.drag_window] -= 1
                    self.select_vscreen(self.current_vscreen - 1)
                    self.screen.root.warp_pointer(
                        int(screen_width * (1 - BOUNCE_RATIO)), y)
        else:
            # resize
            self.drag_window.configure(
                width=max(MIN_WIN_SIZE, self.drag_geometry.width + dx),
                height=max(MIN_WIN_SIZE, self.drag_geometry.height + dy))

    def handle_map_request(self, event):
        """Event handler for MapRequest events."""
        window = event.window
        self.manage_window(window)
        window.warp_pointer(PNT_OFFSET, PNT_OFFSET)
        self.focus_window(window)

    def handle_unmap_notify(self, event):
        """Event handler for UnmapNotify events."""
        window = event.window
        if window in self.exposed_windows:
            self.unmanage_window(window)

    def handle_map_notify(self, event):
        """Event handler for MapNotify events."""
        window = event.window
        if self.is_managed_window(window):
            return
        self.manage_window(window)

    def handle_enter_notify(self, event):
        """Event handler for EnterNotify events."""
        window = event.window
        if window in self.exposed_windows:
            self.focus_window(window)
            self.raise_window(window)

    def handle_destroy_notify(self, event):
        """Event handler for DestroyNotify events."""
        window = event.window
        self.unmanage_window(window)

    def handle_configure_request(self, event):
        """Event handler for ConfigureRequest events."""
        window = event.window
        x, y = event.x, event.y
        width, height = event.width, event.height
        mask = event.value_mask
        if mask == 0b1111:
            window.configure(x=x, y=y, width=width, height=height)
        elif mask == 0b1100:
            window.configure(width=width, height=height)
        elif mask == 0b0011:
            window.configure(x=x, y=y)
        elif mask == 0b01000000:
            window.configure(event.stack_mode)

    # ---------------- callback functions
    def destroy_window(self, event):
        """Destroy WINDOW under cursor."""

        window = event.child

        if self.is_managed_window(window):
            debug('Destroyed: %s' % self.get_window_name(window))
            window.destroy()
            self.unmanage_window(window)

    def select_screen(self, event, n):
        """Warp to SCREEN `n`."""
        if n != self.current_vscreen:  # Prohibit selecting current screen
            self.select_vscreen(n)

    def move_to_screen(self, event, n):
        """Move WINDOW to screen `n`."""
        if self.current_vscreen == n:  # Prohibit moving to current screen
            return

        self.window_vscreen[event.child] = n
        self.select_vscreen(self.current_vscreen)

    def warp(self, event, direction):
        window = event.window

        data = self.screen.root.query_pointer()._data
        x, y = data["root_x"], data["root_y"]

        candidates = {}

        for window in self.exposed_windows:
            geom = self.get_window_geometry(window)
            if geom is None:
                continue

            cx = geom.x+geom.width//2
            cy = geom.y+geom.height//2

            d = direction
            # Add window if it match the requirements
            if (d == "left" and cx<x) or (d == "down" and cy>y) or (d == "up" and cy<y) or (d == "right" and cx>x):
                eucleidian_distance = ((cx - x)**2 + (cy - y)**2)**0.5
                candidates[eucleidian_distance] = window

        if candidates:  # Pick the closest window, if there are none, warp to current window
            n = sorted(candidates)[0]
            window = candidates[n]

        g = window.get_geometry()
        window.warp_pointer(g.width//2, g.height//2)
        window.set_input_focus(X.RevertToParent, 0)
        window.raise_window()

    def cmd(self, event, *args):
        """Perform a command"""
        command = "".join(args)
        subprocess.Popen(command.split())

    def restart(self, event):
        debug('restarting %s...' % sys.argv[0])
        os.execv(sys.argv[0], sys.argv)

    def exit(self, event, *args, **kwargs):
        debug('terminating...')
        sys.exit()

    # ---- Main Loop ----
    def loop(self):
        """Main WM loop process"""

        # Try manage all present windows (On restart)
        for child in self.screen.root.query_tree().children:
            self.manage_window(child)

        # Select first screen and hide all others
        self.select_screen(None, VIRTUAL_SCREENS[0])

        while True:
            event = self.display.next_event()

            if event.type in self.EVENT_HANDLER:
                handler = getattr(self, self.EVENT_HANDLER[event.type], None)
                if handler:
                    try:
                        handler(event)
                    except Exception as e:
                        traceback.print_tb(e.__traceback__)

if __name__ == "__main__":
    wm = WindowManager()
    try:
        startup()
    finally:
        wm.loop()
